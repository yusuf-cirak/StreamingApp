# @format

name: "streaming-app"

services:
  gateway:
    container_name: streaming-app-gateway
    image: yusufcirak/streaming-app-gateway
    # build:
    #   context: ./media-server/gateway
    #   dockerfile: Dockerfile
    environment:
      - STREAM_API_BASE_URL=${STREAM_API_BASE_URL}
      - STREAM_API_KEY=${STREAM_API_KEY}
    volumes:
      - ./media-server/rtmp/nginx.conf:/etc/nginx/nginx.conf
    restart: unless-stopped
    networks:
      - streaming-app

  nginx-rtmp:
    container_name: streaming-app-nginx-rtmp
    image: tiangolo/nginx-rtmp
    ports:
      - "8080:80"
    volumes:
      - ./media-server/rtmp/nginx.conf:/etc/nginx/nginx.conf
    restart: unless-stopped
    networks:
      - streaming-app
    depends_on:
      - gateway

  database:
    image: postgres:latest
    container_name: streaming-app-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: StreamingApp
    ports:
      - "5432:5432"
    volumes:
      - streaming-app-postgres-data:/var/lib/postgresql/data
    networks:
      - streaming-app

  redis:
    image: redis:latest
    container_name: streaming-app-redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "6379:6379"
    networks:
      - streaming-app

  backend:
    container_name: streaming-app-backend
    restart: unless-stopped
    build:
      context: ./backend/src
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
    # ports:
    #   - "5117:8080"
    depends_on:
      - database
      - redis
    networks:
      - streaming-app

  frontend:
    container_name: streaming-app-frontend
    image: yusufcirak/streaming-app-frontend
    restart: unless-stopped
    # build:
    #   context: ./frontend
    #   dockerfile: Dockerfile
    networks:
      - streaming-app
    depends_on:
      - backend
    # ports:
    #   - "4200:80"

networks:
  streaming-app:
    driver: bridge
    name: streaming-app

volumes:
  streaming-app-postgres-data:
    driver: local
